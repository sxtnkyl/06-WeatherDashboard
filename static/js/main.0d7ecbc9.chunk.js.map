{"version":3,"sources":["util/windowContext.js","api/weatherAPI.jsx","util/helperFuncs.js","components/Navbar/searchBar/index.jsx","components/Navbar/index.jsx","components/DisplayBody/singleDay/index.jsx","components/DisplayBody/forecast/dayCard.jsx","components/DisplayBody/forecast/index.jsx","components/DisplayBody/index.jsx","components/App/app.jsx","index.jsx"],"names":["WindowContext","createContext","fetchSingleDay","city","a","axios","url","process","type","then","res","catch","err","console","log","fetchOneCall","lat","long","makeForecastData","forecastObj","returnData","current","forecast","forecastArr","singleDayForecast","name","date","icon","temp","maxTemp","minTemp","windSpd","humidity","uv","currentDay","makeDt","dt","weather","wind_speed","uvi","i","info","daily","newForecast","max","min","push","Date","toLocaleDateString","iconSeverity","code","includes","SearchBar","useContext","local","setLocal","useState","value","setValue","updateSearchedCities","newCitiesArray","searchedCities","handleSubmit","data","coord","lon","oneCall","currentCity","currentCityData","currentCityForecast","onChange","e","target","placeholder","list","id","map","onClick","Navbar","className","SingleDay","imgStr","condition","style","border","src","DayCard","Forecast","day","DisplayBody","App","useEffect","prevSearched","JSON","parse","localStorage","getItem","setItem","stringify","useMemo","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0d7ecbc9.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nexport const WindowContext = createContext(null);\r\n","import axios from \"axios\";\r\nexport const testFetch = () => {\r\n  const city = {\r\n    coord: {\r\n      lon: -122.08,\r\n      lat: 37.39,\r\n    },\r\n    weather: [\r\n      {\r\n        id: 800,\r\n        main: \"Clear\",\r\n        description: \"clear sky\",\r\n        icon: \"01d\",\r\n      },\r\n    ],\r\n    base: \"stations\",\r\n    main: {\r\n      temp: 282.55,\r\n      feels_like: 281.86,\r\n      temp_min: 280.37,\r\n      temp_max: 284.26,\r\n      pressure: 1023,\r\n      humidity: 100,\r\n    },\r\n    visibility: 16093,\r\n    wind: {\r\n      speed: 1.5,\r\n      deg: 350,\r\n    },\r\n    clouds: {\r\n      all: 1,\r\n    },\r\n    dt: 1560350645,\r\n    sys: {\r\n      type: 1,\r\n      id: 5122,\r\n      message: 0.0139,\r\n      country: \"US\",\r\n      sunrise: 1560343627,\r\n      sunset: 1560396563,\r\n    },\r\n    timezone: -25200,\r\n    id: 420006353,\r\n    name: \"Mountain View\",\r\n    cod: 200,\r\n  };\r\n  return city;\r\n};\r\n\r\n//use to get lat/long\r\nexport const fetchSingleDay = async (city) => {\r\n  return axios({\r\n    url: `https://${process.env.REACT_APP_WEATHER_BASE_DOMAIN}weather?q=${city}&appid=${process.env.REACT_APP_WEATHER_API_KEY}`,\r\n    type: \"GET\",\r\n  })\r\n    .then((res) => {\r\n      return res;\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const fetchOneCall = async (lat, long) => {\r\n  return axios({\r\n    url: `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${long}&units=imperial&exclude=minutely,hourly,alerts&appid=${process.env.REACT_APP_WEATHER_API_KEY}`,\r\n    type: \"GET\",\r\n  })\r\n    .then((res) => {\r\n      return res;\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n      return err;\r\n    });\r\n};\r\n","//make forecast data\r\nexport const makeForecastData = (city, forecastObj) => {\r\n  let returnData = {\r\n    current: null,\r\n    forecast: null,\r\n  };\r\n  //returns data.daily[arr of 8]\r\n  //use index 1-5\r\n  let forecastArr = [];\r\n  let singleDayForecast = {\r\n    name: city,\r\n    date: \"get moment\",\r\n    icon: null,\r\n    temp: null,\r\n    maxTemp: null,\r\n    minTemp: null,\r\n    windSpd: null,\r\n    humidity: null,\r\n    uv: null,\r\n  };\r\n\r\n  //make current day\r\n  let currentDay = { ...singleDayForecast };\r\n  currentDay.date = makeDt(forecastObj.current.dt);\r\n  currentDay.icon = forecastObj.current.weather[0].icon;\r\n  currentDay.temp = forecastObj.current.temp;\r\n  currentDay.windSpd = forecastObj.current.wind_speed;\r\n  currentDay.humidity = forecastObj.current.humidity;\r\n  currentDay.uv = forecastObj.current.uvi;\r\n  returnData.current = currentDay;\r\n  //make forecast data for each day, add to forecastArr\r\n  for (let i = 1; i < 6; i++) {\r\n    let info = forecastObj.daily[i];\r\n    let newForecast = { ...singleDayForecast };\r\n    newForecast.date = makeDt(info.dt);\r\n    newForecast.icon = info.weather[0].icon;\r\n    newForecast.maxTemp = info.temp.max;\r\n    newForecast.minTemp = info.temp.min;\r\n    newForecast.windSpd = info.wind_speed;\r\n    newForecast.humidity = info.humidity;\r\n    newForecast.uv = info.uvi;\r\n    forecastArr.push(newForecast);\r\n  }\r\n  returnData.forecast = forecastArr;\r\n\r\n  return returnData;\r\n};\r\n\r\nexport const makeDt = (dt) => {\r\n  var formattedTime = new Date(dt * 1000).toLocaleDateString(\"en-US\");\r\n  return formattedTime;\r\n};\r\n\r\nexport const iconSeverity = (code) => {\r\n  let moderate = [\"09d\"];\r\n  let severe = [\"50d\", \"13d\", \"10d\", \"11d\"];\r\n  return severe.includes(code)\r\n    ? \"red\"\r\n    : moderate.includes(code)\r\n    ? \"yellow\"\r\n    : \"green\";\r\n};\r\n","import React, { useContext, useState } from \"react\";\r\nimport { WindowContext } from \"../../../util/windowContext\";\r\nimport { fetchSingleDay, fetchOneCall } from \"../../../api/weatherAPI\";\r\nimport { makeForecastData } from \"../../../util/helperFuncs\";\r\n\r\nconst SearchBar = () => {\r\n  //TODO: add lazy initial state for localStorage prev searched list\r\n  const { local, setLocal } = useContext(WindowContext);\r\n  const [value, setValue] = useState(\"\");\r\n\r\n  const updateSearchedCities = (city) => {\r\n    let newCitiesArray = [...local.searchedCities];\r\n    //handle searchedCity dups\r\n    if (!local.searchedCities.includes(city)) newCitiesArray.push(city);\r\n    return newCitiesArray;\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    //fetch the things\r\n    //TODO: add error handling/loading hook\r\n    let { data } = await fetchSingleDay(value);\r\n    let oneCall = await fetchOneCall(data.coord.lat, data.coord.lon);\r\n    //org the things\r\n    let forecast = makeForecastData(data.name, oneCall.data);\r\n    //update ctx\r\n    setLocal({\r\n      ...local,\r\n      searchedCities: updateSearchedCities(data.name),\r\n      currentCity: data.name,\r\n      currentCityData: forecast.current,\r\n      currentCityForecast: forecast.forecast,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"text\"\r\n        onChange={(e) => setValue(e.target.value)}\r\n        value={value}\r\n        placeholder=\"Search for a City\"\r\n        list=\"hist\"\r\n      />\r\n      <datalist id=\"hist\">\r\n        {local.searchedCities.map((city) => (\r\n          <option value={city}>{city}</option>\r\n        ))}\r\n      </datalist>\r\n      <button onClick={handleSubmit}>Search City</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n","import React, { useContext } from \"react\";\r\nimport \"./index.css\";\r\nimport { WindowContext } from \"../../util/windowContext\";\r\nimport SearchBar from \"./searchBar\";\r\n\r\nconst Navbar = () => {\r\n  const { local, setLocal } = useContext(WindowContext);\r\n\r\n  return (\r\n    <nav className=\"nav-container\">\r\n      <span>\r\n        {local.currentCityData == null\r\n          ? \"fallback icon\"\r\n          : local.currentCityData.name}\r\n      </span>\r\n      <SearchBar />\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\nimport { WindowContext } from \"../../../util/windowContext\";\r\nimport { iconSeverity } from \"../../../util/helperFuncs\";\r\n\r\nconst SingleDay = () => {\r\n  const { local, setLocal } = useContext(WindowContext);\r\n  let { date, icon, temp, windSpd, humidity, uv } = local.currentCityData;\r\n  let imgStr = `http://openweathermap.org/img/wn/${icon}@2x.png`;\r\n  let condition = iconSeverity(icon);\r\n\r\n  return (\r\n    <div style={{ border: \"1px solid purple\" }}>\r\n      <div>{date}</div>\r\n      <img src={imgStr} style={{ border: `1px solid ${condition}` }} />\r\n      <div>Current Temp: {temp}°F</div>\r\n      <div>Wind Speed: {windSpd}mph</div>\r\n      <div>Humidity: {humidity}%</div>\r\n      <div>UV Index: {uv}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SingleDay;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { iconSeverity } from \"../../../util/helperFuncs\";\r\n\r\nconst DayCard = ({ data }) => {\r\n  let { date, icon, maxTemp, minTemp, windSpd, humidity, uv } = data;\r\n  let imgStr = `http://openweathermap.org/img/wn/${icon}@2x.png`;\r\n  let condition = iconSeverity(icon);\r\n\r\n  return (\r\n    <div style={{ border: \"1px solid white\" }}>\r\n      <div>{date}</div>\r\n      <img src={imgStr} style={{ border: `1px solid ${condition}` }} />\r\n      <div>Hi: {maxTemp}°F</div>\r\n      <div>Low: {minTemp}°F</div>\r\n      <div>Wind Speed: {windSpd}mph</div>\r\n      <div>Humidity: {humidity}%</div>\r\n      <div>UV Index: {uv}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DayCard;\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\nimport { WindowContext } from \"../../../util/windowContext\";\r\nimport DayCard from \"./dayCard\";\r\n\r\nconst Forecast = () => {\r\n  const { local, setLocal } = useContext(WindowContext);\r\n\r\n  return (\r\n    <div style={{ border: \"1px solid black\" }}>\r\n      {local.currentCityForecast\r\n        ? local.currentCityForecast.map((day, i) => {\r\n            return <DayCard data={day} key={i} />;\r\n          })\r\n        : \"loading forecast data\"}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Forecast;\r\n","import SingleDay from \"./singleDay/index\";\r\nimport Forecast from \"./forecast/index\";\r\n\r\nconst DisplayBody = () => {\r\n  return (\r\n    <section className=\"display-body-container\">\r\n      <SingleDay />\r\n      <Forecast />\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default DisplayBody;\r\n","import React from \"react\";\r\nimport { useState, useEffect, useMemo } from \"react\";\r\nimport NavBar from \"../Navbar/index\";\r\nimport DisplayBody from \"../DisplayBody\";\r\nimport { WindowContext } from \"../../util/windowContext\";\r\n\r\nconst App = () => {\r\n  const [local, setLocal] = useState({\r\n    searchedCities: [],\r\n    currentCity: null,\r\n    currentCityData: null,\r\n    currentCityForecast: null,\r\n  });\r\n\r\n  //updated searched cities from localStorage on load\r\n  useEffect(() => {\r\n    let prevSearched = JSON.parse(localStorage.getItem(\"prevCities\"));\r\n    if (prevSearched !== null)\r\n      setLocal({\r\n        ...local,\r\n        searchedCities: [...prevSearched],\r\n      });\r\n  }, []);\r\n\r\n  //TODO: reduce rerenders when prev city is searched > updateCities in searchBar\r\n  useEffect(() => {\r\n    localStorage.setItem(\"prevCities\", JSON.stringify(local.searchedCities));\r\n  }, [local.searchedCities]);\r\n\r\n  //memoize ctx\r\n  const value = useMemo(() => ({ local, setLocal }), [local, setLocal]);\r\n\r\n  return (\r\n    <WindowContext.Provider value={value}>\r\n      <NavBar />\r\n      {local.currentCity && <DisplayBody />}\r\n    </WindowContext.Provider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App/app\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}